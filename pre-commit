#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Disable pylint invalid module name complaint.
# pylint: disable=C0103

""" Pre Commit script for invoking linters."""

import imp
import subprocess
import imp
import re
import pylint.lint

import codecs
import copy
import getopt
import math  # for log
import os
import re
import sre_compile
import string
import sys
import unicodedata


def run_command_in_folder(command, folder):
  run_command = subprocess.Popen(command,
                                 shell=True,
                                 cwd=folder,
                                 stdin=subprocess.PIPE,
                                 stdout=subprocess.PIPE)
  stdout, stderr = run_command.communicate()
  command_output = stdout.rstrip()
  return command_output


def get_root_git_repo(some_folder_in_root_repo='./'):
  return run_command_in_folder('git rev-parse --show-toplevel', some_folder_in_root_repo)


def get_linter_subfolder(root_repo_folder):
  return run_command_in_folder("git submodule | awk '{ print $2 }' | grep linter", root_repo_folder)


def get_staged_files(some_folder_in_root_repo='./'):
  output = run_command_in_folder("git diff --staged --name-only", some_folder_in_root_repo)
  return output.split("\n")


def get_unstaged_files(some_folder_in_root_repo='./'):
  output = run_command_in_folder("git diff --name-only", some_folder_in_root_repo)
  return output.split("\n")


def check_cpp_lint(repo_root, staged_files, cpplint_file, ascii_art):
  """Runs Google's cpplint on all C++ files staged for commit,"""
  cpplint = imp.load_source('cpplint', cpplint_file)
  for changed_file in staged_files:
    if re.search(r'\.cc$', changed_file):
      changed_file = repo_root + "/" + changed_file
      cpplint.ProcessFile(changed_file, 0)
    elif re.search(r'\.h$', changed_file):
      # Change global _root variable for desired behaviour of
      # cpplint's header guard. Without this change the header include
      # guard would have to look like: INCLUDE_REFILL_SUBPATH_HEADER_H_.
      # We want it to look like: REFILL_SUBPATH_HEADER_H_
      cpplint._root = "include"  # pylint: disable=W0212
      changed_file = repo_root + "/" + changed_file
      cpplint.ProcessFile(changed_file, 0)
      cpplint._root = None  # pylint: disable=W0212

  if cpplint._cpplint_state.error_count:  # pylint: disable=W0212
    print(ascii_art.AsciiArt.zen_errors)
    exit(cpplint._cpplint_state.error_count)  # pylint: disable=W0212
  else:
    print(ascii_art.AsciiArt.zen_success)


def check_modified_after_staging(staged_files):
  """Checks if one of the staged files was modified after staging."""
  files_changed = get_unstaged_files()
  files_changed = filter(None, files_changed)

  staged_files_changed = 0

  for changed_file in files_changed:
    if changed_file in staged_files:
      print changed_file + " modified after staging"
      staged_files_changed = 1

  if staged_files_changed:
    print "Aborting commit: Staged files modified after staging."
    exit(1)


def check_python_lint(repo_root, staged_files, pylint_file):
  """Runs pylint on all python scripts staged for commit."""

  # Dummy class for pylint related IO.
  class WritableObject(object):
    "dummy output stream for pylint"

    def __init__(self):
      self.content = []

    def write(self, input_str):
      "dummy write"
      self.content.append(input_str)

    def read(self):
      "dummy read"
      return self.content


def check_commit_against_master(repo_root, ascii_art):
  current_branch = run_command_in_folder("git branch | grep \"*\" | sed \"s/* //\"", repo_root)

  if current_branch == "master:":
    print(ascii_art.AsciiArt.grumpy_cat)
    exit(1)
  return

  # Parse each pylint output line individualy and searches
  # for errors in the code.
  pylint_errors = []
  for changed_file in staged_files:
    if re.search(r'\.py$', changed_file):

      print "Running pylint on " + repo_root + "/" + changed_file
      pylint_output = WritableObject()
      pylint_args = ["--rcfile=" + pylint_file,
                     "-rn",
                     repo_root + "/" + changed_file]
      from pylint.reporters.text import TextReporter
      pylint.lint.Run(pylint_args,
                      reporter=TextReporter(pylint_output),
                      exit=False)

      for output_line in pylint_output.read():
        if re.search(r'^(E|C|W):', output_line):
          print changed_file + ": " + output_line
          pylint_errors.append(output_line)

  if len(pylint_errors) > 0:
    print "Pylint found errors. Terminating."
    exit(len(pylint_errors))


def main():
  """ Main pre-commit function for calling code checking script. """

  # Get git root folder.
  repo_root = get_root_git_repo()

  # Get linter subfolder
  linter_subfolder = get_linter_subfolder(repo_root)

  cpplint_file = repo_root + "/" + linter_subfolder + "/cpplint.py"
  pylint_file = repo_root + "/" + linter_subfolder + "/pylint.rc"
  ascii_art_file = repo_root + "/" + linter_subfolder + "/ascii_art.py"

  # TODO(mfehr): remove this
  print("Found linter subfolder: {}".format(linter_subfolder))
  print("Found cpplint file at: {}".format(cpplint_file))
  print("Found pylint file at: {}".format(pylint_file))

  # Run checks
  staged_files = get_staged_files()

  # Load ascii art.
  ascii_art = imp.load_source('ascii_art', ascii_art_file)

  check_commit_against_master(repo_root, ascii_art)

  # Do not allow commiting files that were modified after staging. This
  # avoids problems such as forgetting to stage fixes of cpplint complaints.
  # check_modified_after_staging(staged_files)

  # Use Google's C++ linter to check for compliance with Google style guide.
  check_cpp_lint(repo_root, staged_files, cpplint_file, ascii_art)

  # Use pylint to check for comimpliance with Tensofrflow python style guide.
  check_python_lint(repo_root, staged_files, pylint_file)


if __name__ == "__main__":
  main()
