#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Disable pylint invalid module name complaint.
# pylint : disable = C0103

""" Pre Commit script for invoking linters."""

import codecs
import copy
import datetime
import getopt
import imp
import imp
import math  # for log
import os
import pylint.lint
import re
import re
import sre_compile
import string
import subprocess
import sys
import unicodedata

clang_format_diff_executable = "clang-format-diff-3.8"


def run_command_in_folder(command, folder):
  run_command = subprocess.Popen(command,
                                 shell=True,
                                 cwd=folder,
                                 stdin=subprocess.PIPE,
                                 stdout=subprocess.PIPE)
  stdout, stderr = run_command.communicate()
  command_output = stdout.rstrip()
  return command_output


def get_git_repo_root(some_folder_in_root_repo='./'):
  return run_command_in_folder('git rev-parse --show-toplevel', some_folder_in_root_repo)


def get_linter_subfolder(root_repo_folder):
  return run_command_in_folder("git submodule | awk '{ print $2 }' | grep linter", root_repo_folder)


def get_staged_files(some_folder_in_root_repo='./'):
  output = run_command_in_folder("git diff --staged --name-only", some_folder_in_root_repo)
  if len(output) == 0:
    return []
  else:
    return output.split("\n")


def get_unstaged_files(some_folder_in_root_repo='./'):
  output = run_command_in_folder("git diff --name-only", some_folder_in_root_repo)
  return output.split("\n")


def check_cpp_lint(repo_root, staged_files, cpplint_file, ascii_art):
  """Runs Google's cpplint on all C++ files staged for commit,"""
  cpplint = imp.load_source('cpplint', cpplint_file)
  for changed_file in staged_files:
    if re.search(r'\.cc$', changed_file):
      changed_file = repo_root + "/" + changed_file
      cpplint.ProcessFile(changed_file, 0)
    elif re.search(r'\.h$', changed_file):
      # Change global _root variable for desired behaviour of
      # cpplint's header guard. Without this change the header include
      # guard would have to look like : INCLUDE_${NAMESPACE}_SUBPATH_HEADER_H_.
      # We want it to look like : ${NAMESPACE}_SUBPATH_HEADER_H_
      cpplint._root = "include"  # pylint: disable=W0212
      changed_file = repo_root + "/" + changed_file
      cpplint.ProcessFile(changed_file, 0)
      cpplint._root = None  # pylint: disable=W0212

  if cpplint._cpplint_state.error_count:  # pylint: disable=W0212
    print("===================================================")
    print("Found {} cpplint errors".format(cpplint._cpplint_state.error_count))
    print("===================================================")
    return False
  else:
    return True


def check_modified_after_staging(staged_files):
  """Checks if one of the staged files was modified after staging."""
  files_changed = get_unstaged_files()
  files_changed = filter(None, files_changed)

  staged_files_changed = 0

  staged_files_changed_list = []

  is_first = True
  for changed_file in files_changed:
    if changed_file in staged_files:

      if is_first:
        print("===================================================")
        is_first = False

      print("\'{}\' was modified after staging".format(changed_file))
      staged_files_changed_list.append(changed_file)
      staged_files_changed += 1

  if staged_files_changed > 0:
    print("---------------------------------------------------")
    print("Found {} files that have been changed after staging".format(staged_files_changed))
    print("===================================================")

  return staged_files_changed_list


def check_commit_against_master(repo_root, ascii_art):
  current_branch = run_command_in_folder("git branch | grep \"*\" | sed \"s/* //\"", repo_root)
  print("\nCurrent_branch: {}\n".format(current_branch))
  return current_branch == "master"


def check_if_merge_commit(repo_root):
  merge_msg_file_path = repo_root + "/.git/MERGE_MSG"
  return os.path.isfile(merge_msg_file_path)


def run_clang_format(repo_root, staged_files, list_of_changed_staged_files):
  """Runs clang format on all cpp files staged for commit."""

  clang_format_patch = "/tmp/-" + os.path.basename(os.path.normpath(repo_root)) + \
      "_" + datetime.datetime.now().isoformat() + ".patch"

  success = run_command_in_folder("git diff -U0 --cached | "
                                  + clang_format_diff_executable + " -style=file -p1 > " + clang_format_patch, repo_root)

  if not os.stat(clang_format_patch).st_size == 0:
    if list_of_changed_staged_files:
      print("===================================================")
      print("Cannot format your code, because some files are \n"
            "only partially staged! Format your code or try \n"
            "stashing your unstaged changes...")
      print("===================================================")
      exit(1)

    run_command_in_folder("git apply -p0 " + clang_format_patch, repo_root)
    run_command_in_folder("git add " + ' '.join(staged_files), repo_root)

    print("===================================================")
    print("Formatted staged files with clang-format.")
    print("===================================================")

  run_command_in_folder("rm -rf " + clang_format_patch, repo_root)

  return True


def run_autopep8_format(repo_root, staged_files, list_of_changed_staged_files):
  """Runs autopep8 format on all python files staged for commit."""
  # TODO(mfehr): IMPLEMENT
  return True


def check_python_lint(repo_root, staged_files, pylint_file):
  """Runs pylint on all python scripts staged for commit."""

  class TextReporterBuffer(object):
    """Stores the output produced by the pylint TextReporter."""

    def __init__(self):
      self.content = []

    def write(self, input_str):
      self.content.append(input_str)

    def read(self):
      return self.content

# Parse each pylint output line individualy and searches
# for errors in the code.
  pylint_errors = []
  for changed_file in staged_files:
    if re.search(r'\.py$', changed_file):

      print("Running pylint on \'{}\'".format(repo_root + "/" + changed_file))
      pylint_output = TextReporterBuffer()
      pylint_args = ["--rcfile=" + pylint_file,
                     "-rn",
                     repo_root + "/" + changed_file]
      from pylint.reporters.text import TextReporter
      pylint.lint.Run(pylint_args,
                      reporter=TextReporter(pylint_output),
                      exit=False)

      for output_line in pylint_output.read():
        if re.search(r'^(E|C|W):', output_line):
          print(changed_file + ": " + output_line)
          pylint_errors.append(output_line)

  if len(pylint_errors) > 0:
    print("===================================================")
    print("Found {} pylint errors".format(len(pylint_errors)))
    print("===================================================")
    return False
  else:
    return True


def main():
  """ Main pre-commit function for calling code checking script. """

# Get git root folder.
  repo_root = get_git_repo_root()

# Get linter subfolder
  linter_subfolder = get_linter_subfolder(repo_root)

  cpplint_file = repo_root + "/" + linter_subfolder + "/cpplint.py"
  pylint_file = repo_root + "/" + linter_subfolder + "/pylint.rc"
  ascii_art_file = repo_root + "/" + linter_subfolder + "/ascii_art.py"

  print("Found linter subfolder: {}".format(linter_subfolder))
  print("Found ascii art file at: {}".format(ascii_art_file))
  print("Found cpplint file at: {}".format(cpplint_file))
  print("Found pylint file at: {}".format(pylint_file))

# Run checks
  staged_files = get_staged_files()

  if len(staged_files) == 0:
    print("\n")
    print("===================================================")
    print("No files staged...")
    print("===================================================")
    exit(1)

# Load ascii art.
  ascii_art = imp.load_source('ascii_art', ascii_art_file)

  if check_commit_against_master(repo_root, ascii_art):
    print(ascii_art.AsciiArt.grumpy_cat)
    exit(1)

  if not check_if_merge_commit(repo_root):
    # Do not allow commiting files that were modified after staging.This
    # avoids problems such as forgetting to stage fixes of cpplint complaints.
    list_of_changed_staged_files = check_modified_after_staging(staged_files)

    run_clang_format(repo_root, staged_files, list_of_changed_staged_files)
    run_autopep8_format(repo_root, staged_files, list_of_changed_staged_files)

    # Use Google's C++ linter to check for compliance with Google style guide.
    cpp_lint_success = check_cpp_lint(repo_root, staged_files, cpplint_file, ascii_art)

    # Use pylint to check for comimpliance with Tensofrflow python style guide.
    pylint_success = check_python_lint(repo_root, staged_files, pylint_file)

    if not(cpp_lint_success and pylint_success):
      exit(1)
    else:

      print("===================================================")
      print("Commit accepted, well done!")
      print("===================================================")

      print(ascii_art.AsciiArt.zen_success)
  else:
    print(ascii_art.AsciiArt.homer_woohoo)


if __name__ == "__main__":
  main()
